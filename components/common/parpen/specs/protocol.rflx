package Protocol is

   type Esc_Char is range 27 .. 27 with Size => 8;
   type Connection_ID is range 1 .. 2**32-1 with Size => 32;
   type Offset is mod 2**64;

   type Method is range 0 .. 2**32-1 with Size => 32;
   type Length is range 0 .. 2**32-1 with Size => 32;
   type Cookie is mod 2**64;

   --  We should reuse Binder.Handle, but this does not work right now
   --  Ref. Componolit/RecordFlux#186
   type Handle is range 0 .. 2**32-1 with Size => 32;
   type Binder is mod 2**64;

   type Label is
      message
         Delimiter     : Esc_Char;
         Connection_ID : Connection_ID;
      end message;

   type Tag is (T_HANDLE,
                T_BINDER,
                T_STATUS) with Size => 8;

   type Status is (STATUS_OK,
                   STATUS_UNKNOWN_ERROR,
                   STATUS_PROTOCOL_VIOLATION,
                   STATUS_INVALID_REQUEST,
                   STATUS_INVALID_HANDLE,
                   STATUS_INVALID_BINDER,
                   STATUS_INVALID_METHOD,
                   STATUS_OFFSET_OUT_OF_RANGE,
                   STATUS_RECEIVER_NOT_READY,
                   STATUS_RECEIVE_BUFFER_TOO_SMALL,
                   STATUS_OVERFLOW) with Size => 8;

   type Transaction is
      message
         Tag  : Tag
            then Handle if Tag = T_HANDLE,
            then Binder if Tag = T_BINDER,
            then Code   if Tag = T_STATUS;
         Code : Status
            then null;
         Handle         : Handle
            then Method;
         Binder      : Binder;
         Method      : Method;
         Cookie      : Cookie;
         Send_Offset : Offset;
         Send_Length : Length;
         Meta_Offset : Offset;
         Meta_Length : Length;
         Recv_Offset : Offset;
         Recv_Length : Length;
      end message;

   --  Offset lists without explicit length field do not work at the moment (cf. Componolit/RecordFlux#184)
   --  Just use the message below for retrieving the numeric value and parse the sequence manually.
   type Offsets is
      message
         Data : Offset;
      end message;

end Protocol;
